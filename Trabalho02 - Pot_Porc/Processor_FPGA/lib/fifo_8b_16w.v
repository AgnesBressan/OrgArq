/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post69, git sha1 e02b7f64b) */

(* \amaranth.hierarchy  = "fifo_8b_16w" *)
(* top =  1  *)
(* generator = "Amaranth" *)
module fifo_8b_16w(r_rdy, r_data, r_level, w_en, w_rdy, w_data, w_level, clk, rst, r_en);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire [4:0] \$7 ;
  input clk;
  wire clk;
  wire [4:0] level;
  output [7:0] r_data;
  wire [7:0] r_data;
  input r_en;
  wire r_en;
  output [4:0] r_level;
  wire [4:0] r_level;
  output r_rdy;
  reg r_rdy = 1'h0;
  reg \r_rdy$next ;
  input rst;
  wire rst;
  wire [3:0] unbuffered_level;
  wire [7:0] unbuffered_r_data;
  wire unbuffered_r_en;
  wire unbuffered_r_rdy;
  wire [7:0] unbuffered_w_data;
  wire unbuffered_w_en;
  wire unbuffered_w_rdy;
  input [7:0] w_data;
  wire [7:0] w_data;
  input w_en;
  wire w_en;
  output [4:0] w_level;
  wire [4:0] w_level;
  output w_rdy;
  wire w_rdy;
  assign \$1  = ~ r_rdy;
  assign \$3  = \$1  | r_en;
  assign \$5  = unbuffered_r_rdy & \$3 ;
  assign \$7  = unbuffered_level + r_rdy;
  always @(posedge clk)
    r_rdy <= \r_rdy$next ;
  unbuffered unbuffered (
    .clk(clk),
    .level(unbuffered_level),
    .r_data(unbuffered_r_data),
    .r_en(unbuffered_r_en),
    .r_rdy(unbuffered_r_rdy),
    .rst(rst),
    .w_data(unbuffered_w_data),
    .w_en(unbuffered_w_en),
    .w_rdy(unbuffered_w_rdy)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \r_rdy$next  = r_rdy;
    casez ({ r_en, unbuffered_r_en })
      2'b?1:
          \r_rdy$next  = 1'h1;
      2'b1?:
          \r_rdy$next  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \r_rdy$next  = 1'h0;
    endcase
  end
  assign r_level = level;
  assign w_level = level;
  assign level = \$7 ;
  assign unbuffered_r_en = \$5 ;
  assign r_data = unbuffered_r_data;
  assign w_rdy = unbuffered_w_rdy;
  assign unbuffered_w_en = w_en;
  assign unbuffered_w_data = w_data;
endmodule

(* \amaranth.hierarchy  = "fifo_8b_16w.unbuffered" *)
(* generator = "Amaranth" *)
module unbuffered(w_en, w_rdy, r_data, r_en, r_rdy, level, rst, clk, w_data);
  reg \$auto$verilog_backend.cc:2083:dump_module$2  = 0;
  wire [4:0] \$10 ;
  wire [4:0] \$11 ;
  wire [4:0] \$13 ;
  wire \$14 ;
  wire \$17 ;
  wire [4:0] \$19 ;
  wire \$2 ;
  wire [4:0] \$20 ;
  wire [4:0] \$22 ;
  wire \$23 ;
  wire \$26 ;
  wire \$28 ;
  wire \$29 ;
  wire \$32 ;
  wire [4:0] \$34 ;
  wire [4:0] \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$43 ;
  wire [4:0] \$45 ;
  wire [4:0] \$46 ;
  wire \$6 ;
  wire \$8 ;
  input clk;
  wire clk;
  reg [3:0] consume = 4'h0;
  reg [3:0] \consume$next ;
  output [3:0] level;
  reg [3:0] level = 4'h0;
  reg [3:0] \level$next ;
  reg [3:0] produce = 4'h0;
  reg [3:0] \produce$next ;
  output [7:0] r_data;
  wire [7:0] r_data;
  input r_en;
  wire r_en;
  wire [3:0] r_level;
  output r_rdy;
  wire r_rdy;
  input rst;
  wire rst;
  wire [3:0] storage_r_addr;
  wire [7:0] storage_r_data;
  wire storage_r_en;
  wire [3:0] storage_w_addr;
  wire [7:0] storage_w_data;
  wire storage_w_en;
  input [7:0] w_data;
  wire [7:0] w_data;
  input w_en;
  wire w_en;
  wire [3:0] w_level;
  output w_rdy;
  wire w_rdy;
  reg [7:0] storage [14:0];
  initial begin
    storage[0] = 8'h00;
    storage[1] = 8'h00;
    storage[2] = 8'h00;
    storage[3] = 8'h00;
    storage[4] = 8'h00;
    storage[5] = 8'h00;
    storage[6] = 8'h00;
    storage[7] = 8'h00;
    storage[8] = 8'h00;
    storage[9] = 8'h00;
    storage[10] = 8'h00;
    storage[11] = 8'h00;
    storage[12] = 8'h00;
    storage[13] = 8'h00;
    storage[14] = 8'h00;
  end
  always @(posedge clk) begin
    if (storage_w_en)
      storage[storage_w_addr] <= storage_w_data;
  end
  reg [7:0] _0_;
  always @(posedge clk) begin
    if (storage_r_en) begin
      _0_ <= storage[storage_r_addr];
    end
  end
  assign storage_r_data = _0_;
  assign \$11  = produce + 1'h1;
  assign \$14  = produce == 4'he;
  assign \$13  = \$14  ? 5'h00 : \$11 ;
  assign \$17  = r_rdy & r_en;
  assign \$20  = consume + 1'h1;
  assign \$23  = consume == 4'he;
  assign \$22  = \$23  ? 5'h00 : \$20 ;
  assign \$26  = w_rdy & w_en;
  assign \$2  = level != 4'hf;
  assign \$29  = r_rdy & r_en;
  assign \$28  = ~ \$29 ;
  assign \$32  = \$26  & \$28 ;
  assign \$35  = level + 1'h1;
  assign \$37  = r_rdy & r_en;
  assign \$40  = w_rdy & w_en;
  assign \$39  = ~ \$40 ;
  assign \$43  = \$37  & \$39 ;
  assign \$46  = level - 1'h1;
  always @(posedge clk)
    produce <= \produce$next ;
  always @(posedge clk)
    consume <= \consume$next ;
  assign \$4  = | level;
  always @(posedge clk)
    level <= \level$next ;
  assign \$6  = w_en & w_rdy;
  assign \$8  = w_rdy & w_en;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \consume$next  = consume;
    casez (\$17 )
      1'h1:
          \consume$next  = \$22 [3:0];
    endcase
    casez (rst)
      1'h1:
          \consume$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \level$next  = level;
    casez (\$32 )
      1'h1:
          \level$next  = \$35 [3:0];
    endcase
    casez (\$43 )
      1'h1:
          \level$next  = \$46 [3:0];
    endcase
    casez (rst)
      1'h1:
          \level$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \produce$next  = produce;
    casez (\$8 )
      1'h1:
          \produce$next  = \$13 [3:0];
    endcase
    casez (rst)
      1'h1:
          \produce$next  = 4'h0;
    endcase
  end
  assign \$10  = \$13 ;
  assign \$19  = \$22 ;
  assign \$34  = \$35 ;
  assign \$45  = \$46 ;
  assign storage_r_en = r_en;
  assign r_data = storage_r_data;
  assign storage_r_addr = consume;
  assign storage_w_en = \$6 ;
  assign storage_w_data = w_data;
  assign storage_w_addr = produce;
  assign r_level = level;
  assign w_level = level;
  assign r_rdy = \$4 ;
  assign w_rdy = \$2 ;
endmodule
